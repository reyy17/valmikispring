version: "3.8"
volumes:
  postgres_data:

services:
  payments-order-service:
    build:
      context: ../
    container_name: payments-order-service
    ports:
      - "15550:15550"
      - "15551:15551"
      - "5005:5005"
    environment:
      POSTGRES_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      KAFKA_PLAINTEXT_SERVERS: kafka:9093
      THOUGHT_MACHINE_KAFKA_SERVERS: kafka:9093
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - db
      - payments-order-service-db-migration
      - kafka
      - redis
  payments-order-service-db-migration:
    build:
      context: ..
    environment:
      POSTGRES_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    entrypoint: >
      java -jar /app/app.jar db migrate config.yml
    depends_on:
      - db

  db:
    image: public.ecr.aws/docker/library/postgres:13
    container_name: finxdb
    restart: always
    volumes:
      - ./db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: |-
        payment
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: pg_isready -U postgres
      interval: 1m
      timeout: 10s
      retries: 2

  zookeeper:
    image: public.ecr.aws/bitnami/zookeeper:3.8.0
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: public.ecr.aws/bitnami/kafka:3.3.1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,INTERNAL://kafka:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,INTERNAL://kafka:9093
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
    depends_on:
      - kafka

  redis:
    image: public.ecr.aws/ubuntu/redis:6.0-22.04_edge
    container_name: fxredis
    restart: always
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
